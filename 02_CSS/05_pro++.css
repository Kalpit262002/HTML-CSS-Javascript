#hover_testing_container{
    display: flex;
    gap: 10px;
}

#hover_testing1{
    width: 100px;
    height: 100px;
    background-color: lightblue;
    border: 2px solid black;
    transition-delay: 1s; /* Transition property - it will delay the transition by 1 second */
}

#hover_testing1:hover{
    background-color: rgb(217, 120, 24);
    color: white;
}

#hover_testing1:active{ /*  Active state-When you click */
    background-color: rgb(24, 217, 43);
    color: white;
}


#hover_testing2{
    width: 100px;
    height: 100px;
    background-color: lightblue;
    border: 2px solid black;
    transition-property: all; /* It means whatever transition property we all on this div will be applied on all trasitional changes(like hover or active all) */
    transition-duration: 1s; /* Transition property - it will take 1 second to complete the transition */
    transition-timing-function: ease-in;
    transition-delay: 100ms;
    /* transition: all 1s ease-in 100ms; --> transition shorthand */
}

#hover_testing2:hover{
    background-color: rgb(217, 120, 24);
    color: white;
    font-size: 18px;
}

#hover_testing2:active{ /*  Active state-When you click */
    background-color: rgb(24, 217, 43);
    color: white;
    transition-duration: 10ms; 
}

/* Transform properties can work on default static positioned div */
#Transform_testing1{
    margin-top: 50px;
    margin-left: 50px;
    height: 100px;
    width: 100px;
    background-color: rgb(61, 203, 39);
    transform: rotateX(180deg); /* This rotates our div on x axis 180 deg making it upside down, if we rotate it by 90 deg on x-axis, it will be disappered because think in 3-d it will be in z plane. It can also be written as rotate: x 180deg; */
    scale: 1.5; /*  This will scale our div by 1.5 times its original size on both x and y axis
    transform: scale(1.5,2); --> 1.5 times in x-axis and 2 times in y-axis */
}

#Transform_testing_container{
    display: flex;
    gap:20px;
}

#Transform_testing2{
    margin-top: 50px;
    margin-left: 50px;
    height: 100px;
    width: 100px;
    background-color: rgb(203, 151, 39);
    transition-property: all;
    transition-duration: 1s;
}

#Transform_testing2:hover{
    transform: rotate(180deg);
    transition-duration: 2s;
}

#translate_testing1{
    margin-top: 50px;
    margin-left: 50px;
    height: 100px;
    width: 100px;
    background-color: rgb(203, 39, 165);
    transition-property: all;
    transition-duration: 1s;
}

#translate_testing1:hover{
    transition-duration: 2s;
    transform: translate(-400px); /* This will move our div 400px to the left, if we want to move it to right we can use positive value
    if we want to move it up we can use negative value for y-axis like translate(0,-400px) */
}

#skew_testing1{
    margin-top: 50px;
    margin-left: 50px;
    height: 100px;
    width: 100px;
    background-color: rgb(88, 39, 203);
    transition-property: all;
    transition-duration: 1s;
    color: white;
}

#skew_testing1:hover{
    transition-duration: 2s;
    transform: skew(-20deg); /* This will skew our div 20 degrees to the left from bottom and right from top, if we want to skew it to right we can use positive value
    if we want to skew it up we can use negative value for y-axis like skew(0,-20deg) */
}


@keyframes my_animation{ /* This is like animation template which we can use in various divs */
    from{
        background-color: rgb(56, 51, 175);
        transform: translateX(0px);/* If we write like this we don't need to position our div like relative or anything, cause transform will take care of it
        but if we write like left: 0px;, we will need to position our div cause this will not work on default static positioned div. */
    }
    to{
        background-color: rgb(44, 200, 140);
        transform: translateX(200px);
    }
}

#animation_testing1{
    height: 100px;
    width: 100px;
    background-color: rgb(203, 39, 154);
    color: white;
    animation-name: my_animation; /* This will apply the animation to our div */
    animation-duration: 2s;
    animation-timing-function: ease-in-out; /* This will make the animation smooth */
    animation-delay: 0.5s;
    animation-iteration-count: infinite;
    animation-direction: alternate; /* This will make the animation go back and forth */
    /* animation: my_animation 2s ease-in-out 0.5s infinite alternate; --> This is the shorthand for all the animation properties we apply above */
}

/* We can add animations like this too */
@keyframes my_animation2{
    0%{ /* It's like from */
        background-color: rgb(51, 169, 175);
        transform: translateX(0px);
    }
    75%{ /* We can add any point */
        background-color: rgb(93, 44, 200);
    }
    100%{ /* It's like to */
        background-color: rgb(200, 80, 44);
        transform: translateX(200px);
    }
}

#animation_testing2{
    height: 100px;
    width: 100px;
    background-color: rgb(203, 39, 154);
    color: white;
    animation: my_animation2 2s ease-in 0.5s infinite alternate-reverse;
}

#Loader{
    width: 100px;
    height: 100px;
    border-radius: 50%;
    border: thick solid yellow;
    border-left: thick solid black; /* Creating border on one side(left) only */
    animation: loader 1s ease-in-out 0.5s infinite normal;
}

@keyframes loader{
    from{
        transform:rotate(0deg);
    }
    to{
        transform:rotate(360deg);
    }
}

