.flex1_class{
    display: inline-block;
    width: 100px;
    height: 100px;
    margin-right: 5px;
}

#flex1_container{
    display: flex;
    /* flex-direction: row; --> main axis is horizontal but item start from left to right, by default this is applied on flex */
    flex-direction: row-reverse; /* main axis is horizontal but item start from right to left */
    justify-content: space-evenly; /* items will be distributed evenly with space around them on main axis */
    /*align-items: flex-end; --> items will be aligned to the end of the cross axis and space will be kept in between that is generated by wrap feature. */
    align-content: center; /* items will be aligned to the center of the cross axis and space will be removed in between that is generated by wrap feature. */
    flex-wrap: wrap;
    height: 400px;
    width: 400px;
    border: 2px solid black;
}

#flex1_item1{
    background-color: rgb(237, 86, 86);
}

#flex1_item2{
    background-color: rgb(85, 212, 85);
}

#flex1_item3{
    background-color: rgb(86, 86, 237);
}

#flex1_item4{
    background-color: rgb(255, 255, 86);
}

#flex1_item5{
    background-color: rgb(242, 90, 242);
}




.flex2_class{
    display: inline-block;
    width: 100px;
    height: 100px;
    margin-right: 5px;
}

#flex2_container{
    display: flex;
    /* flex-direction: column; --> Items will try to fit inside the container even if there is not enough space, and yes main axis is vertical start from top to bottom. */
    flex-direction: column-reverse;
    align-items: center;
    height: 300px;
    width: 800px;
    border: 2px solid black;
}

#flex2_item1{
    background-color: rgb(237, 86, 86);
    align-self: flex-end; /* This item will be aligned to the end of the cross axis, which is horizontal in this case, it always has higher priority. */
}

#flex2_item2{
    background-color: rgb(85, 212, 85);
}

#flex2_item3{
    background-color: rgb(86, 86, 237);
    flex-grow: 1; /* This item will take up one time as much space as the other items in the flex container if space is available. */
}

#flex2_item4{
    background-color: rgb(255, 255, 86);
    flex-grow: 2; /* This item will take up twice as much space as the other items in the flex container if space is available.
    Similary flex-shrink will allow this item to shrink twice as much as the other items if space is limited. */
}

#flex2_item5{
    background-color: rgb(242, 90, 242);
    flex-shrink: 0; /* This item will not shrink even if space is limited. */
}

@media(max-width: 600px){/* This media query is used for responsive design */
    body{
        background-color: lightcoral; /* This will change the background color of the body when the viewport width is 600px or less. */
    }
}

#media_query_container{
    width: 200px;
    height: 200px;
    background-color: lightcoral;
}
@media(max-width: 300px){
    #media_query_container{
        background-color: green;
    }
}
@media((min-width: 300px) and (max-width: 400px)){
    #media_query_container{
        background-color: pink;
    }
}
@media((min-width: 400px) and (max-width: 600px)){
    #media_query_container{
        background-color: red;
    }
}
@media(min-width: 600px){
    #media_query_container{
        background-color: blue;
    }
}